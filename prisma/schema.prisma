// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid()) //* to make a string type unique Id 
  email               String     @unique @db.VarChar()
  admin               Admin?
  doctor              Doctor?
  patient             Patient?
  password            String     @db.VarChar()
  role                UserRole
  needsPasswordChange Boolean    @default(true)
  status              UserStatus @default(ACTIVE)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  @@map("users")
}

//  Admin Model ** 
model Admin {
  id            String   @id @default(uuid())
  name          String   @db.VarChar()
  email         String   @unique @db.VarChar()
  photoProfile  String?
  contactNumber String   @db.VarChar()
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

//  Doctor Model ** 

model Doctor {
  id                  String   @id @default(uuid())
  name                String   @db.VarChar()
  email               String   @unique @db.VarChar()
  photoProfile        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int      @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean  @default(false)
  averageRating       Float?   @default(0.0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [email], references: [email])

  @@map("doctors")
}

// Patient Model ** 
model Patient {
  id            String   @id @default(uuid())
  name          String   @db.VarChar()
  email         String   @unique @db.VarChar()
  contactNumber String   @db.VarChar()
  photoProfile  String?
  address       String?  @db.VarChar()
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("patients")
}

// All Enums **

// User Role** 
enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

//  User Status ** 
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

//  User Gender ** 

enum Gender {
  MALE
  FEMALE
  OTHERS
}
